<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(oServer)
    visible = false
randomize()
draw_set_font(fTest)
mouse_current_pressed = -1

turn_list = ds_list_create();
state = 1
selected_monster = noone

combat_log = ds_list_create()

weather = noone
first_monster = noone
padding = (room_width - 800)/5
if !instance_exists(oClient)
{
for(var yy = 0; yy &lt; 2; yy ++)
    for(var xx = 0; xx &lt; 2; xx ++)
    {
        team_1[xx,yy] = instance_create(padding + (padding + 200) * xx,padding/2 + (padding/2 + 200) * yy,oBattleMonster)
        team_1[xx,yy].team = 1
    }
for(var yy = 0; yy &lt; 2; yy ++)
    for(var xx = 0; xx &lt; 2; xx ++)
    {
        team_2[xx,yy] = instance_create(padding + (padding + 200) * (2 + xx),padding/2 + (padding/2 + 200) * yy,oBattleMonster)
        team_2[xx,yy].team = 2
    }
event_user(0)
}
action_monster = noone//oBattleMonster.id
force_show_log = false
log_location = 0
pressed_back = 0
hovertime = 0
current_hover = noone
init_word_highlights()
//TEMP
/*
for(var yy = 0; yy &lt; 2; yy ++)
    for(var xx = 0; xx &lt; 2; xx ++)
    {
        with(team_1[xx,yy])
        {
            switch(irandom(4))
            {
            case 3:
                    image_index = 5
                    num_moves = 4
                    moves[0,0] = "Hard Throw"
                    moves[0,1] = m_hard_throw
                    moves[0,2] = 0
                    moves[1,0] = "Crab Apple"
                    moves[1,1] = m_crab_apple
                    moves[1,2] = 0
                    moves[2,0] = "Sweet Apple"
                    moves[2,1] = m_sweet_apple
                    moves[2,2] = 0
                    moves[3,0] = "Explosive Apple"
                    moves[3,1] = m_explosive_apple
                    moves[3,2] = 0
            break;
            case 2:
            image_index = 2
                    num_moves = 4
                    moves[0,0] = "Melt"
                    moves[0,1] = m_melt
                    moves[0,2] = 2
                    moves[1,0] = "Freeze"
                    moves[1,1] = m_freeze
                    moves[1,2] = 2
                    moves[2,0] = "Snowball"
                    moves[2,1] = m_snowball
                    moves[2,2] = 0
                    moves[3,0] = "Slushball"
                    moves[3,1] = m_slushball
                    moves[3,2] = 0
            break;
            case 1:
                    num_moves = 4
                    moves[0,0] = "Ooze Spit"
                    moves[0,1] = m_ooze_spit
                    moves[0,2] = 0
                    moves[1,0] = "Secrete Ooze"
                    moves[1,1] = m_secrete_ooze
                    moves[1,2] = 2
                    moves[2,0] = "Curl Up"
                    moves[2,1] = m_curl_up
                    moves[2,2] = 2
                    moves[3,0] = "Scream"
                    moves[3,1] = m_scream
                    moves[3,2] = 4
            break;
            default:
            image_index = 1
            }
        }
        with(team_2[yy,xx])
        {
            switch(irandom(4))
            {
            case 3:
                    image_index = 5
                    num_moves = 4
                    moves[0,0] = "Hard Throw"
                    moves[0,1] = m_hard_throw
                    moves[0,2] = 0
                    moves[1,0] = "Crab Apple"
                    moves[1,1] = m_crab_apple
                    moves[1,2] = 0
                    moves[2,0] = "Sweet Apple"
                    moves[2,1] = m_sweet_apple
                    moves[2,2] = 0
                    moves[3,0] = "Explosive Apple"
                    moves[3,1] = m_explosive_apple
                    moves[3,2] = 0
            break;
            case 2:
            image_index = 2
                    num_moves = 4
                    moves[0,0] = "Melt"
                    moves[0,1] = m_melt
                    moves[0,2] = 2
                    moves[1,0] = "Freeze"
                    moves[1,1] = m_freeze
                    moves[1,2] = 2
                    moves[2,0] = "Snowball"
                    moves[2,1] = m_snowball
                    moves[2,2] = 0
                    moves[3,0] = "Slushball"
                    moves[3,1] = m_slushball
                    moves[3,2] = 0
            break;
            case 1:
                    num_moves = 4
                    moves[0,0] = "Ooze Spit"
                    moves[0,1] = m_ooze_spit
                    moves[0,2] = 0
                    moves[1,0] = "Secrete Ooze"
                    moves[1,1] = m_secrete_ooze
                    moves[1,2] = 2
                    moves[2,0] = "Curl Up"
                    moves[2,1] = m_curl_up
                    moves[2,2] = 2
                    moves[3,0] = "Scream"
                    moves[3,1] = m_scream
                    moves[3,2] = 0
            break;
            default:
            image_index = 1
            }
        }
    }*/

//event_user(0)

/*
for(var yy = 0; yy &lt; 2; yy ++)
    for(var xx = 0; xx &lt; 4; xx ++)
    {
        var m = instance_create(padding + (padding + 200) * xx,padding/2 + (padding/2 + 200) * yy,oBattleMonster);
        if xx &lt; 2
            m.player_controlled = 1
        monsters[xx + yy * 4] = m
        switch(xx + yy * 4)
        {
            case 0: 
                m.image_index = 2
                with(m)
                {
                    num_moves = 4
                    moves[0,0] = "Melt"
                    moves[0,1] = m_melt
                    moves[0,2] = 2
                    moves[1,0] = "Freeze"
                    moves[1,1] = m_freeze
                    moves[1,2] = 2
                    moves[2,0] = "Snowball"
                    moves[2,1] = m_snowball
                    moves[2,2] = 0
                    moves[3,0] = "Slushball"
                    moves[3,1] = m_slushball
                    moves[3,2] = 0
                }
                m.outline_color = c_blue
            break;
            case 1: 
                            m.image_index = 3
                with(m)
                {
                    num_moves = 4
                    moves[0,0] = "Hard Throw"
                    moves[0,1] = m_hard_throw
                    moves[0,2] = 0
                    moves[1,0] = "Crab Apple"
                    moves[1,1] = m_crab_apple
                    moves[1,2] = 0
                    moves[2,0] = "Sweet Apple"
                    moves[2,1] = m_sweet_apple
                    moves[2,2] = 0
                    moves[3,0] = "Explosive Apple"
                    moves[3,1] = m_explosive_apple
                    moves[3,2] = 0
                }
                m.outline_color = c_green
            break;
            case 2: 
                m.outline_color = c_yellow
            break;
            case 3: 
                m.outline_color = c_maroon
            break;
            case 4: 
                m.image_index = 4
                with(m)
                {
                    num_moves = 4
                    moves[0,0] = "Ooze Spit"
                    moves[0,1] = m_ooze_spit
                    moves[0,2] = 0
                    moves[1,0] = "Secrete Ooze"
                    moves[1,1] = m_secrete_ooze
                    moves[1,2] = 2
                    moves[2,0] = "Curl Up"
                    moves[2,1] = m_curl_up
                    moves[2,2] = 2
                    moves[3,0] = "Scream"
                    moves[3,1] = m_scream
                    moves[3,2] = 0
                }
                m.outline_color = c_fuchsia
            break;
            case 5: 
                m.outline_color = c_lime
            break;
            case 6: 
                m.outline_color = c_olive
            break;
            case 7: 
                m.outline_color = c_orange
            break;
        }
        /*
        if yy = 0
            switch(xx)
            {
            case 0:case 2:
                m.outline_color = c_blue
            break;
            case 1:case 3:
                m.outline_color = c_green
            break;
            }
        else
            switch(xx)
            {
            case 0:case 2:
                m.outline_color = c_yellow
            break;
            case 1:case 3:
                m.outline_color = c_maroon
            break;
            }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(combat_log)
ds_list_destroy(turn_list)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attack
if !ds_list_empty(turn_list)
{
var active_monster = ds_list_find_value(turn_list,0);
show_debug_message("Start " + string(active_monster)+" turn")
if active_monster &lt;= 0
{
ds_list_insert(combat_log,0,"RUMBLE ZONE avoided. 'Cause' monster " + string(active_monster))
}
else if instance_exists(active_monster)// and active_monster &gt; 0
{
active_monster.alarm[0] = room_speed/2
if script_execute(active_monster.moves[active_monster.selected_move],m_TTYPE) &lt;= 4 and (!ds_exists(active_monster.target_que,ds_type_queue) or ds_queue_empty(active_monster.target_que))
{
    ds_list_delete(turn_list,0)
}
else
{
    with(active_monster)
    {
        if ds_exists(target_que,ds_type_queue)
        {
            target = ds_queue_dequeue(target_que)
            if ds_queue_empty(target_que)
            {
                ds_queue_destroy(target_que)
                target_que = noone
                ds_list_delete(other.turn_list,0)
            }
        }
        else
            ds_list_delete(other.turn_list,0)
        
    }
}
alarm[0] = room_speed
}
else
{
    ds_list_delete(turn_list,0)
    alarm[0] = 1
}
}

else
{
with(oBattleMonster)
{
    if stam &lt; 0
        stam = 0
    if bleed_level &lt; 1
    {
        stam += round(endurance * (1 + random(.5)-.25))
        if stam &gt; max_stam
            stam = max_stam
    }
    else
    {
        bleed_level -= .5
        ds_list_insert(other.combat_log,0,name + " is bleeding")
    }
    if poisoned &gt;= 1
    {
        tags = ds_list_create()
        ds_list_add(tags,"poison")
        dmg = 3
        event_user(0)
    }
    if disease_level &gt;= 1
    {
        tags = ds_list_create()
        ds_list_add(tags,"disease")
        dmg = 6
        event_user(0)
    }
    script_execute(moves[selected_move],m_END_ACTION)
    attack_streak = 0
    if dodge_timer &gt; 0
        dodge_timer --
    if hp &lt;= 0 
    {
        instance_destroy()
        ds_list_insert(oBattleController.combat_log,0,"[c="+string(name_color)+"]"+name + " has died." )
    }
}
event_user(0)
if instance_exists(weather)
    with(weather)
        event_user(0)
ds_list_insert(combat_log,0,"End Round")
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>log_location ++
if log_location &gt; ds_list_size(combat_log) - 1
    log_location = ds_list_size(combat_log) - 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>log_location --
if log_location &lt; 0
    log_location ++
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stage 2 start
ds_list_insert(combat_log,0,"Start Round")
stage = 2
selected_monster = noone
    with(oBattleMonster)
    {
        if sleep_level &lt; 1
        {
        script_execute(moves[selected_move],m_IMI_ACTION)
        var placed = 0;
        var turn_list = oBattleController.turn_list;
        for(var ii = 0; ii &lt; ds_list_size(turn_list); ii++) 
        {
            var monster_id = ds_list_find_value(turn_list,ii);
            if script_execute(monster_id.moves[monster_id.selected_move],m_PRIORITY) &lt; script_execute(moves[selected_move],m_PRIORITY)
            {
                placed = 1
                ds_list_insert(turn_list,ii,id)
                break;
            }
            else if script_execute(monster_id.moves[monster_id.selected_move],m_PRIORITY) = script_execute(moves[selected_move],m_PRIORITY)
            {
                var mon_spd = 0;
                with(monster_id)
                    mon_spd = spd
                if mon_spd &lt; spd
                {
                    placed = 1
                    ds_list_insert(turn_list,ii,id)
                    break;
                }
                else if mon_spd = spd and random(1) &gt; .5
                {
                    placed = 1
                    ds_list_insert(turn_list,ii,id)
                    break;
                }
            }
        }
        if !placed
            ds_list_insert(turn_list,ii,id)
        }
        else
        ds_list_insert(other.combat_log,0,name + " is asleep")
    }
    alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stage 1 start
selected_monster = noone
with(oBattleMonster)
    has_selected_move = 0
for(var i = 0; i &lt; 4; i++)
if instance_exists(team_1[i % 2,i div 2]) and !team_1[i % 2,i div 2].ability_lock and team_1[i % 2,i div 2].sleep_level &lt; 1
{
    selected_monster = team_1[i % 2,i div 2]
    first_monster = selected_monster
    break;
}
if selected_monster = noone
{
if instance_exists(oClient)
                                {
                                    stage = 3
                                    with(oClient)
                                        SendTurn()
                                }
                                else
                                    event_user(1)
}
stage = 1
with(oBattleMonster)
    if cd[selected_move] &gt; 0
    {
        for(var i = 0; i &lt; 4; i++)
            if cd[i] &lt;= 0 
            {
                selected_move = i
                break;
            }
        if i &gt;= 4
        {}    //rest (to be added)
    }
for(var yy = 0; yy &lt; 2; yy ++)
    for(var xx = 0; xx &lt; 2; xx ++)
    {
        if instance_exists(team_1[xx,yy]) and team_1[xx,yy].ability_lock = false
        with(team_1[xx,yy])
        {
            target = noone
            if ds_exists(target_que,ds_type_queue)
                ds_queue_destroy(target_que)
            target_que = noone
            selected_move = 0
        }
        if !instance_exists(oClient) and instance_exists(team_2[xx,yy]) and team_2[xx,yy].ability_lock = false
        with(team_2[xx,yy])
        {
            target = oBattleController.team_1[irandom(1),irandom(1)]
            while(!instance_exists(target) or target.untargetable)
                target = oBattleController.team_1[irandom(1),irandom(1)]
            if target.target_lock_level &gt; 0
                target = target_lock
            if ds_exists(target_que,ds_type_queue)
                ds_queue_destroy(target_que)
            target_que = noone
            selected_move = irandom(3)
        }
    }

    /*
for(var i = 0; i &lt; 8; i++)
{
    if !instance_exists(monsters[i].target)
        with(oBattleMonster)
            if player_controlled != other.monsters[i].player_controlled
            {
                other.monsters[i].target = id
                break;
            }
    /*if !instance_exists(monsters[i].f_target)
        with(oBattleMonster)
            if player_controlled = other.monsters[i].player_controlled
            {
                other.monsters[i].f_target = id
                break;
            }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw action menu/combat log
//draw action menu
var mb_pressed = mouse_check_button_pressed(mb_left);
var mb_released = mouse_check_button_released(mb_left);
var yy = padding/2 + (padding/2 + 200) * 2;
draw_rectangle_colour(0,yy,room_width,room_height,c_dkgray,c_dkgray,c_dkgray,c_dkgray,0)
var spaceing = (room_height - yy)/3;
if stage = 1 and instance_exists(selected_monster)
{
//draw back button
if selected_monster.action_state = 1 or selected_monster != first_monster
{
    var back_blend = c_dkgray
    if mouse_x &lt; room_width/6 and mouse_y &gt; yy
    {
        back_blend = c_white
        if mb_pressed
            pressed_back = 1
        else if mb_released and pressed_back
        {
            if selected_monster.action_state = 1
            {
                if ds_exists(selected_monster.target_que,ds_type_queue)
                    ds_queue_destroy(selected_monster.target_que)
                selected_monster.target_que = noone
                selected_monster.action_state = 0
            }
            else
                for(var ii = 2; ii &gt;= 0; ii--)
                    if instance_exists(team_1[(ii) % 2,(ii) div 2]) and team_1[ii % 2,ii div 2].has_selected_move and !team_1[(ii) % 2,(ii) div 2].ability_lock and team_1[(ii) % 2,(ii) div 2].sleep_level &lt; 1
                    {
                        selected_monster = team_1[(ii) % 2,(ii) div 2]
                        if ds_exists(selected_monster.target_que,ds_type_queue)
                            ds_queue_destroy(selected_monster.target_que)
                        selected_monster.target_que = noone
                        selected_monster.has_selected_move = 0
                        break;
                    }
        }
    }
    draw_sprite_ext(sBackButton,0,0,yy + spaceing * 1.5 - sprite_get_height(sBackButton)/2,1,1,0,back_blend,1)    
}    

if selected_monster.action_state = 0
{
    var col = c_black;
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    
    var must_slap = true;
    for(var i = 0; i &lt; selected_monster.num_moves; i++)
    {
        col = c_black
        if selected_monster.cd[i] &gt; 0
        {
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),script_execute(selected_monster.moves[i],m_NAME),col,col,col,col,.4)
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),selected_monster.cd[i],col,col,col,col,1)
        }
        else if script_execute(selected_monster.moves[i],m_COST) &gt; selected_monster.stam 
        {
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),script_execute(selected_monster.moves[i],m_NAME),col,col,col,col,.4)
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),"Stamina cost " + string(script_execute(selected_monster.moves[i],m_COST)),col,col,col,col,1)
        }
        else if (selected_monster.frighten_level &gt;= 1 and script_execute(selected_monster.moves[i],m_MTYPE) != mt_O)
        {
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),script_execute(selected_monster.moves[i],m_NAME),col,col,col,col,.4)
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),"Frightened",col,col,col,col,1)
        }
        else
        {
            must_slap = false
            if mouse_x &gt; room_width/6 and mouse_x &lt; 5 * room_width/6 and mouse_y &gt;= yy + spaceing * (.5 + i % 2) and mouse_y &lt;= yy + spaceing * (1.5 + i % 2) and ((room_width/2 &lt;= mouse_x and i div 2) or (room_width/2 &gt;= mouse_x and !(i div 2)))
            {
                if current_hover = i
                    hovertime++
                else
                {
                    hovertime = 0
                    current_hover = i
                }
                col = c_white
                if (mb_pressed or mb_released)
                {
                    if mb_pressed 
                        mouse_current_pressed = i
                    else if mb_released and mouse_current_pressed = i
                    {
                        selected_monster.selected_move = i
                        var ttype = script_execute(selected_monster.moves[selected_monster.selected_move],m_TTYPE)
                        if ttype &lt; 2 or ttype &gt;=5
                            selected_monster.action_state = 1
                        else
                        {
                            selected_monster.has_selected_move = 1
                            selected_monster.action_state = 0
                            var o_selected_monster = selected_monster;
                            for(var ii = 0; ii &lt; 4; ii++)
                                if instance_exists(team_1[(ii) % 2,(ii) div 2]) and !team_1[ii % 2,ii div 2].has_selected_move and !team_1[(ii) % 2,(ii) div 2].ability_lock and team_1[(ii) % 2,(ii) div 2].sleep_level &lt; 1
                                {
                                    selected_monster = team_1[(ii) % 2,(ii) div 2]
                                    break;
                                }
                            if selected_monster = o_selected_monster
                            {
                                if instance_exists(oClient)
                                {
                                    stage = 3
                                    with(oClient)
                                        SendTurn()
                                }
                                else
                                    event_user(1)
                            }
                            break;
                        }
                    }
                }
            } 
            draw_text_color(room_width/3 * (1 + i div 2),yy + spaceing * (1 + i % 2),script_execute(selected_monster.moves[i],m_NAME),col,col,col,col,1)
        }
        if !instance_exists(selected_monster)
            break;
    }
    if must_slap
    {
        if mouse_y &gt;= yy
            {
                hovertime++
                col = c_white
                if (mb_pressed or mb_released)
                {
                    if mb_pressed 
                        mouse_current_pressed = 0
                    else if mb_released and mouse_current_pressed = 0
                    {
                        selected_monster.selected_move = 4
                        var ttype = script_execute(selected_monster.moves[selected_monster.selected_move],m_TTYPE)
                        if ttype &lt; 2 or ttype &gt;=5
                            selected_monster.action_state = 1
                        else
                        {
                            selected_monster.has_selected_move = 1
                            selected_monster.action_state = 0
                            var o_selected_monster = selected_monster;
                            for(var ii = 0; ii &lt; 4; ii++)
                                if instance_exists(team_1[(ii) % 2,(ii) div 2]) and !team_1[ii % 2,ii div 2].has_selected_move and !team_1[(ii) % 2,(ii) div 2].ability_lock and team_1[(ii) % 2,(ii) div 2].sleep_level &lt; 1
                                {
                                    selected_monster = team_1[ii % 2,ii div 2]
                                    break;
                                }
                            if selected_monster = o_selected_monster
                            {
                                if instance_exists(oClient)
                                {
                                    stage = 3
                                    with(oClient)
                                        SendTurn()
                                }
                                else
                                    event_user(1)
                            }
                        }
                    }
                }
            } 
            draw_text_color(room_width/2,yy + (room_height - yy)/2,"Slap",col,col,col,col,1)
    }
    else
    {
        col = c_black
        if mouse_y &gt;= yy and mouse_x &gt; 5 * room_width/6
            {
                if current_hover = 4
                    hovertime++
                else
                {
                    hovertimer = 0
                    current_hover = 4
                }
                col = c_white
                if (mb_pressed or mb_released)
                {
                    if mb_pressed 
                        mouse_current_pressed = 0
                    else if mb_released and mouse_current_pressed = 0
                    {
                        selected_monster.selected_move = 4
                        var ttype = script_execute(selected_monster.moves[selected_monster.selected_move],m_TTYPE)
                        if ttype &lt; 2 or ttype &gt;=5
                            selected_monster.action_state = 1
                        else
                        {
                            selected_monster.has_selected_move = 1
                            selected_monster.action_state = 0
                            var o_selected_monster = selected_monster;
                            for(var ii = 0; ii &lt; 4; ii++)
                                if instance_exists(team_1[(ii) % 2,(ii) div 2]) and !team_1[ii % 2,ii div 2].has_selected_move and !team_1[(ii) % 2,(ii) div 2].ability_lock and team_1[(ii) % 2,(ii) div 2].sleep_level &lt; 1
                                {
                                    selected_monster = team_1[ii % 2,ii div 2]
                                    break;
                                }
                            if selected_monster = o_selected_monster
                            {
                                if instance_exists(oClient)
                                {
                                    stage = 3
                                    with(oClient)
                                        SendTurn()
                                }
                                else
                                    event_user(1)
                            }
                        }
                    }
                }
            } 
            draw_text_color(5.5*room_width/6,yy + (room_height - yy)/2,"Slap",col,col,col,col,1)
    }
    if mb_released
        mouse_current_pressed = -1
}else if selected_monster.action_state = 1
{
    draw_text(room_width/2,yy + spaceing,"Choose target.")
}
}
else if stage = 3
    draw_text(room_width/2,yy + spaceing,"Waiting for opponent.")
else
{
    draw_set_font(fSuperTest)
    var draw_num = ds_list_size(combat_log) - log_location
    if draw_num &gt; 20
        draw_num = 20 + log_location
    for(var i = log_location; i &lt; draw_num; i++)
    {
            draw_log_text(room_width/2,yy + 25 * (i - log_location+.5),string(ds_list_find_value(combat_log,i)),c_white)
    }
    draw_set_font(fTest)
}

if force_show_log
{
draw_set_font(fSuperTest)
draw_set_alpha(.5)
draw_rectangle(room_width/3,0,room_width*2/3,room_height,0)
draw_set_alpha(1)
for(var i = log_location; i &lt; ds_list_size(combat_log);i++)
{
    draw_log_text(room_width/2,20 * (i - log_location +.5),string(ds_list_find_value(combat_log,i)),c_white)
}
draw_set_font(fTest)
}
if mb_released
    pressed_back = 0
if mouse_y &lt; yy
{
    hovertime = 0
    current_hover = 0
}
else if hovertime &gt;= room_speed and instance_exists(selected_monster)
{
    draw_set_font(fSuperTest)
    if current_hover &lt; 4
    {
        draw_log_text(mouse_x,mouse_y - 25,script_execute(selected_monster.moves[current_hover],m_DESC),c_white)
        //draw_text(mouse_x,mouse_y - 25,script_execute(selected_monster.moves[current_hover],m_DESC))
    }
    else
    {
        draw_log_text(mouse_x,mouse_y - 25,script_execute(m_slap,m_DESC),c_white)
        //draw_text(mouse_x,mouse_y - 25,script_execute(m_slap,m_DESC))
    }
    draw_set_font(fTest)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(oServer)
    game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>force_show_log = abs(-- force_show_log)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
