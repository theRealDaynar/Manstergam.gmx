<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client = network_create_socket(network_socket_tcp);
// remember this socket ID so the server can ignore it (if we have a local server)
global.client = client;

buff = buffer_create(256, buffer_grow, 1);
// Connect to our server
var err = network_connect(client, global.ip, 6510);

if( err!=0 ){
    // if we can't connect, show and error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    game_restart();
}

SendInitInfo()
alarm[0]=120;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send keep alive "ping" to server
SendKeepAlive();
alarm[0]=120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");

// Our socket?
if( client == eventid )
{
            // Read all data....
            var buffr = ds_map_find_value(async_load, "buffer");
            // Get number of sprites sent
            var cmd = buffer_read(buffr, buffer_u8 ); 
            switch(cmd)
            {
            case INIT_CMD:
                var btlc = instance_create(x,y,oBattleController);
                random_set_seed(buffer_read(buffr, buffer_u8 ));
                var me = buffer_read(buffr, buffer_u8 );
                if me = 1
                {
                    with(oBattleController)
                    {
                    for(var yy = 0; yy &lt; 2; yy ++)
                        for(var xx = 0; xx &lt; 2; xx ++)
                        {
                            team_1[xx,yy] = instance_create(padding + (padding + 200) * xx,padding/2 + (padding/2 + 200) * yy,oBattleMonster)
                            team_1[xx,yy].team = 1
                        }
                    for(var yy = 0; yy &lt; 2; yy ++)
                        for(var xx = 2; xx &lt; 4; xx ++)
                        {
                            team_2[xx - 2,yy] = instance_create(padding + (padding + 200) * xx,padding/2 + (padding/2 + 200) * yy,oBattleMonster)
                            team_2[xx - 2,yy].team = 2
                        }
                    }
                }else
                {
                with(oBattleController)
                {
                for(var yy = 0; yy &lt; 2; yy ++)
                        for(var xx = 2; xx &lt; 4; xx ++)
                        {
                            team_2[xx - 2,yy] = instance_create(padding + (padding + 200) * xx,padding/2 + (padding/2 + 200) * yy,oBattleMonster)
                            team_2[xx - 2,yy].team = 2
                        }
                        for(var yy = 0; yy &lt; 2; yy ++)
                        for(var xx = 0; xx &lt; 2; xx ++)
                        {
                            team_1[xx,yy] = instance_create(padding + (padding + 200) * xx,padding/2 + (padding/2 + 200) * yy,oBattleMonster)
                            team_1[xx,yy].team = 1
                        }
                        }
                }
                for (i=1; i&lt;3; i+=1)
                {
                     for(var yy = 0; yy &lt; 2; yy ++)
                        for(var xx = 0; xx &lt; 2; xx ++)
                            if me = i
                                with(oBattleController.team_1[xx,yy])
                                    monster_init(buffer_read(buffr, buffer_u8 ))
                            else
                                with(oBattleController.team_2[xx,yy])
                                    monster_init(buffer_read(buffr, buffer_u8 ))
                        
                }
                with(oBattleController)
                    event_user(0)
            break;
            case MOVES_CMD:
                show_debug_message("Turn Start")
                var me = buffer_read(buffr, buffer_u8 );
                oBattleController.server_side_team = me
                random_set_seed(buffer_read(buffr, buffer_u8 ));
                var num_of_moves;
                show_debug_message("Me: "+string(me))
                for (i=1; i&lt;3; i+=1)
                {
                     for(var yy = 0; yy &lt; 2; yy ++)
                        for(var xx = 0; xx &lt; 2; xx ++)
                            if me = i
                            {
                                if instance_exists(oBattleController.team_1[xx,yy])
                                    with(oBattleController.team_1[xx,yy])
                                    {
                                        num_of_moves = buffer_read(buffr, buffer_u8 )
                                        show_debug_message("Number of moves: " + string(num_of_moves))
                                        if ds_exists(target_que,ds_type_queue)
                                            ds_queue_destroy(target_que)
                                        target_que = ds_queue_create()
                                        repeat(num_of_moves)
                                        {
                                            var rel_target_num = buffer_read(buffr, buffer_u8 );
                                            //relative target number 0 - 3 same team 4 - 7 other team
                                            show_debug_message("Relative Target: "+ string(rel_target_num))
                                            for(var yyy = 0; yyy &lt; 2; yyy ++)
                                                for(var xxx = 0; xxx &lt; 2; xxx ++)
                                                    if rel_target_num = xxx + yyy * 2 
                                                    {
                                                        ds_queue_enqueue(target_que,oBattleController.team_1[xxx,yyy])
                                                        show_debug_message("Target ID: "+ string(oBattleController.team_1[xxx,yyy]))
                                                    }else if rel_target_num = xxx + yyy * 2 + 4
                                                     {   ds_queue_enqueue(target_que,oBattleController.team_2[xxx,yyy])
                                                        show_debug_message("Target ID: "+ string(oBattleController.team_2[xxx,yyy]))}
                                                   
                                        }
                                        selected_move = buffer_read(buffr, buffer_u8 )
                                        show_debug_message("Selected Move: "+ string(selected_move))
                                    }
                                else
                                    repeat(3)
                                        buffer_read(buffr, buffer_u8 )
                            }
                            else
                            {
                                if instance_exists(oBattleController.team_2[xx,yy])
                                {
                                    with(oBattleController.team_2[xx,yy])
                                    {
                                        num_of_moves = buffer_read(buffr, buffer_u8 );
                                        show_debug_message("Number of moves: "+ string(num_of_moves))
                                        if ds_exists(target_que,ds_type_queue)
                                            ds_queue_destroy(target_que)
                                        target_que = ds_queue_create()
                                        repeat(num_of_moves)
                                        {
                                            var rel_target_num = buffer_read(buffr, buffer_u8 );
                                            //relative target number 0 - 3 same team 4 - 7 other team
                                            show_debug_message("Relative Target: "+ string(rel_target_num))
                                            for(var yyy = 0; yyy &lt; 2; yyy ++)
                                                for(var xxx = 0; xxx &lt; 2; xxx ++)
                                                    if rel_target_num = xxx + yyy * 2
                                                    {
                                                        ds_queue_enqueue(target_que,oBattleController.team_2[xxx,yyy])
                                                        show_debug_message("Target ID: "+ string(oBattleController.team_2[xxx,yyy]))
                                                    }
                                                    else if rel_target_num = xxx + yyy * 2 + 4
                                                    {
                                                        ds_queue_enqueue(target_que,oBattleController.team_1[xxx,yyy])
                                                        show_debug_message("Target ID: "+ string(oBattleController.team_1[xxx,yyy]))
                                                    }
                                                    
                                        }
                                        
                                        selected_move = buffer_read(buffr, buffer_u8 )
                                        show_debug_message("Selected Move: "+ string(selected_move))
                                    }
                                }
                                else
                                    repeat(3)
                                        buffer_read(buffr, buffer_u8 )
                            }
                        
                }
                with(oBattleController)
                    event_user(1)
            break;
            }

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(oBattleController)
{
draw_set_font(fTest)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_text(room_width/2,room_height/2,"Looking for opponent...")
}
else
visible = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
